{"version":3,"sources":["features/user/userSlice.js","HeaderIcons.js","Footericons.js","firebase.js","TinderCards.js","Chat.js","Chatboxes.js","features/user/UserLogin.js","Imageupload.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user_uid","user_name","user_photourl","user_email","reducers","Sign_in","state","action","payload","uid_google","name_google","photourl_google","email_google","Sign_out","actions","selectUser_uid","user","selectUser_name","selectUser_email","selectUser_photourl","HeaderIcons","backarrow_prop","dispatch","useDispatch","className","to","IconButton","fontSize","onClick","e","src","alt","Footericons","useState","love","setlove","love_red_fill","preventDefault","database","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","provider","GoogleAuthProvider","TinderCards","useSelector","people","setpeople","collection","onSnapshot","snapshot","docs","map","doc","firebase_id","UID","data","people_name","picurl","people_photo_url","person","style","backgroundImage","Chat","Chatboxes","UserLogin","Button","signInWithPopup","then","result_we_get","uid","displayName","photoURL","email","set","firebase_insidefield_uid","people_email","console","log","catch","error","alert","variant","color","Imageupload","image","setimage","ref","child","getDownloadURL","url","update","onChange","target","files","type","placeholder","imageRef","put","App","useEffect","onAuthStateChanged","authUser","path","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6215e773.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// here counter is a layer\r\n// such layer are called Slice of the Store\r\n// such slices are created using createSlice\r\nexport const userSlice = createSlice({\r\n  // and the slice has a name called counter\r\n  name: 'user',\r\n  // who has a initial state\r\n  initialState: {\r\n    // and initial value\r\n    user_uid: null,\r\n    user_name: null,\r\n    user_photourl: null,\r\n    user_email: null,\r\n\r\n  },\r\n  // and here we describe the reducer\r\n  // Reducers are functions that take the current state\r\n  //  and an action as arguments, and return a new state \r\n  // result. In other words, (state, action) => newState.\r\n  // here, increment, decrement and incerementByAmount\r\n  // are reducer functions\r\n  reducers: {\r\n    Sign_in: (state,action) => {\r\n                // The below are defualt comments you get at creation:\r\n                // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n                // doesn't actually mutate the state because it uses the Immer library,\r\n                // which detects changes to a \"draft state\" and produces a brand new\r\n                // immutable state based off those changes\r\n      state.user_uid = action.payload.uid_google;\r\n      state.user_name = action.payload.name_google;\r\n      state.user_photourl = action.payload.photourl_google;\r\n      state.user_email = action.payload.email_google;\r\n    },\r\n    Sign_out: state => {\r\n      state.user_uid = null;\r\n      state.user_name = null;\r\n      state.user_photourl = null;\r\n      state.user_email = null;\r\n\r\n    },\r\n  },\r\n});\r\n\r\n\r\n// and we basically export this to counterSlice.actions\r\nexport const { Sign_in, Sign_out } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\n\r\nexport const selectUser_uid = state => state.user.user_uid;\r\nexport const selectUser_name = state => state.user.user_name;\r\nexport const selectUser_email = state => state.user.user_email;\r\nexport const selectUser_photourl = state => state.user.user_photourl;\r\n\r\n\r\nexport default userSlice.reducer;\r\n\r\n","import React from 'react'\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\r\nimport { IconButton } from '@material-ui/core';\r\nimport './HeaderIcon.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport CancelPresentationIcon from '@material-ui/icons/CancelPresentation';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Sign_out } from './features/user/userSlice';\r\n\r\n\r\nconst HeaderIcons = ({backarrow_prop}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sign_out = (e) => {\r\n        \r\n\r\n        dispatch(Sign_out());\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='header'>\r\n\r\n           {backarrow_prop ?\r\n                    // <Link to ='/'>   </Link>\r\n               ( <Link to ='/'><IconButton className=\"header__icon\"><ArrowBackIosIcon fontSize='large'></ArrowBackIosIcon> </IconButton></Link>):\r\n               (<Link to ='/'><IconButton onClick={sign_out} className=\"header__icon\"><CancelPresentationIcon  fontSize='large' /></IconButton></Link>)}\r\n       \r\n                <Link to ='/'><IconButton className=\"header__icon\"><img className='header_icon_img' src='https://dbdzm869oupei.cloudfront.net/img/sticker/preview/4788.png' alt='' /></IconButton> </Link>\r\n                {/* // <Link to='/chats'> </Link> */}\r\n                <Link to='/chats'><IconButton className=\"header__icon\" ><ChatBubbleIcon fontSize='large' /></IconButton></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderIcons\r\n","import { IconButton } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport FavoriteRoundedIcon from '@material-ui/icons/FavoriteRounded';\r\nimport './Footericons.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Footericons = () => {\r\n\r\n    const [love, setlove] = useState('')\r\n\r\n    const love_red_fill = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        setlove(!love)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='footericon'>\r\n            <IconButton className='footericon_icon_one'> <RefreshIcon fontSize='large'/>  </IconButton>\r\n            {/* Place a conditin here such that the dark fillled\r\n            loveicon appears insted of white filled icon, showing\r\n            whteher you already liekd it  */}\r\n\r\n            {!love ? \r\n                (<IconButton onClick={love_red_fill} className='footericon_icon_two'> <FavoriteBorderIcon  fontSize='large' /> </IconButton>)\r\n                    :\r\n                (<IconButton onClick={love_red_fill} className='footericon_icon_two'> <FavoriteRoundedIcon  fontSize='large' /> </IconButton>)\r\n            }\r\n            \r\n            <Link to='/imageupload'><IconButton className='footericon_icon_three'><AddAPhotoIcon fontSize='large' />  </IconButton></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footericons\r\n","import firebase from 'firebase'\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDnlengfKctoyS1Yqicr1zIskgZZ_6QNzM\",\r\n    authDomain: \"lovebot-bbba8.firebaseapp.com\",\r\n    projectId: \"lovebot-bbba8\",\r\n    storageBucket: \"lovebot-bbba8.appspot.com\",\r\n    messagingSenderId: \"903884868412\",\r\n    appId: \"1:903884868412:web:26253c02920efad96a2c39\",\r\n    measurementId: \"G-DHHTBMZ9E2\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\n  const database = firebaseApp.firestore()\r\n\r\n  const storage = firebase.storage()\r\n  \r\n  const auth = firebase.auth()\r\n  \r\n  const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n  export {database, auth, provider, storage} ","import React, { useEffect, useState } from 'react'\r\nimport './TinderCard.css'\r\nimport {database, Storage} from './firebase'\r\nimport TinderCard from 'react-tinder-card'\r\nimport firebase from 'firebase'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser_uid } from './features/user/userSlice'\r\n\r\nconst TinderCards = () => {\r\n\r\n    const uid = useSelector(selectUser_uid)\r\n\r\n    const [people, setpeople] = useState([])\r\n    \r\n\r\n    // useEffect(() => {\r\n       \r\n\r\n        database.collection('people_collection').onSnapshot(snapshot =>\r\n            setpeople(snapshot.docs.map(doc =>(        \r\n                {\r\n                    firebase_id : doc.UID,\r\n                    name: doc.data().people_name,\r\n                    picurl: doc.data().people_photo_url\r\n\r\n                }\r\n            ))))\r\n\r\n\r\n    // }, [])\r\n   \r\n\r\n\r\n    return (\r\n        <div className='TinderCard'>\r\n        <div className='tinder__card'>\r\n            \r\n                {people.map(person => \r\n                   \r\n                    (\r\n                        <TinderCard  key={person.name}  className='swipe'  >\r\n                            <div style={{ backgroundImage: `url(${person.picurl})` }} className='card'>\r\n                                <h3>{person.name}</h3>\r\n                            </div>\r\n                        </TinderCard>\r\n                        \r\n                    \r\n                    ) )}\r\n        \r\n         </div>\r\n\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TinderCards","import React from 'react'\r\n\r\nconst Chat = () => {\r\n    return (\r\n        <div>\r\n            <h1>hihihi</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React, { useEffect, useState } from 'react'\r\nimport Chat from './Chat'\r\nimport {database} from './firebase'\r\n\r\n\r\nconst Chatboxes = () => {\r\n\r\n    const [messages_from_firestore, setmessages_from_firestore] = useState([])\r\n\r\n \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Chat />\r\n            <Chat />\r\n\r\n            <Chat />\r\n            <Chat />\r\n            <Chat />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chatboxes\r\n","import { Button } from '@material-ui/core'\r\nimport React, { useEffect } from 'react'\r\nimport './Userlogin.css'\r\nimport  {database, auth, provider}  from '../../firebase'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectUser_email, selectUser_name, selectUser_photourl, selectUser_uid, Sign_in } from './userSlice'\r\nimport firebase from 'firebase'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst UserLogin = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n  const signin_function = (e) => {\r\n    e.preventDefault();\r\n\r\n    auth.signInWithPopup(provider)\r\n      .then(result_we_get =>{dispatch(Sign_in({\r\n        uid_google: result_we_get.user.uid,\r\n        name_google: result_we_get.user.displayName,\r\n        photourl_google: result_we_get.user.photoURL,\r\n        email_google: result_we_get.user.email\r\n      }));\r\n        database.collection('people_collection').doc( result_we_get.user.uid).set({\r\n            firebase_insidefield_uid: result_we_get.user.uid,\r\n            people_name: result_we_get.user.displayName,\r\n            // people_photo_url:result_we_get.user.photoURL,\r\n            people_email:  result_we_get.user.email\r\n        });console.log(result_we_get.user)\r\n    }).catch(error => alert(error))\r\n      \r\n\r\n  \r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className='userlogin'>\r\n   \r\n      <Button onClick={signin_function} variant=\"contained\" color=\"secondary\"> Sign In With Google</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserLogin\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import {\r\n//   decrement,\r\n//   increment,\r\n//   incrementByAmount,\r\n//   incrementAsync,\r\n//   selectCount,\r\n// } from './counterSlice';\r\n// import styles from './Counter.module.css';\r\n\r\n// export function Counter() {\r\n//   const count = useSelector(selectCount);\r\n//   const dispatch = useDispatch();\r\n//   const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className={styles.row}>\r\n//         <button\r\n//           className={styles.button}\r\n//           aria-label=\"Increment value\"\r\n//           onClick={() => dispatch(increment())}\r\n//         >\r\n//           +\r\n//         </button>\r\n//         <span className={styles.value}>{count}</span>\r\n//         <button\r\n//           className={styles.button}\r\n//           aria-label=\"Decrement value\"\r\n//           onClick={() => dispatch(decrement())}\r\n//         >\r\n//           -\r\n//         </button>\r\n//       </div>\r\n//       <div className={styles.row}>\r\n//         <input\r\n//           className={styles.textbox}\r\n//           aria-label=\"Set increment amount\"\r\n//           value={incrementAmount}\r\n//           onChange={e => setIncrementAmount(e.target.value)}\r\n//         />\r\n//         <button\r\n//           className={styles.button}\r\n//           onClick={() =>\r\n//             dispatch(incrementByAmount(Number(incrementAmount) || 0))\r\n//           }\r\n//         >\r\n//           Add Amount\r\n//         </button>\r\n//         <button\r\n//           className={styles.asyncButton}\r\n//           onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\r\n//         >\r\n//           Add Async\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { useEffect, useState } from 'react'\r\nimport storage, { database } from './firebase'\r\nimport firebase from 'firebase'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser_email, selectUser_name, selectUser_photourl, selectUser_uid, Sign_in } from './features/user/userSlice'\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from '@material-ui/core'\r\nimport './Imageupload.css'\r\n\r\nconst Imageupload = () => {\r\n\r\n\r\n\r\n                const [image, setimage] = useState([])\r\n                const [photourl_incase_image_not_supplied, setphotourl_incase_image_not_supplied] = useState('')\r\n                \r\n                const uid = useSelector(selectUser_uid)\r\n                const name = useSelector(selectUser_name)\r\n                const photourl = useSelector(selectUser_photourl)\r\n                const email = useSelector(selectUser_email)\r\n\r\n        \r\n            // var photourl_incase_image_not_supplied;\r\n            // for above code to be supplied to below fucntion\r\n        //     // it has to be function\r\n\r\n\r\n    \r\n    const send_image_to_firestore = (e) => {\r\n                    e.preventDefault();\r\n\r\n                    // // Get a reference to the storage service\r\n                    var storage = firebase.storage();\r\n\r\n                    // // Create a storage reference from our storage service\r\n                    var storageRef = storage.ref();\r\n\r\n                    // in short\r\n                    // var storageRef = firebase.storage().ref();\r\n\r\n                    var imageRef = storageRef.child(`${uid}`);\r\n\r\n                    imageRef.put(image).then(function(snapshot) {\r\n                        console.log('Uploaded a blob or file!');\r\n                        alert('Photo Uploaded')\r\n                    });\r\n\r\n                    //   this name is exactly same as uid of user\r\n                    // it can be helpful in navigatin images of user\r\n                    console.log('image name', imageRef.getDownloadURL())\r\n                    console.log('image name', imageRef.getDownloadURL())                 \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL()) \r\n                     console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n\r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n\r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n\r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n\r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n\r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    console.log('image name', imageRef.getDownloadURL())  \r\n                    // console.log(photourl_incase_image_not_supplied)\r\n\r\n                    if (imageRef.name === uid  ) {\r\n                            \r\n                        imageRef.getDownloadURL().then(function(url) {\r\n                            database.collection('people_collection').doc(uid).update({\r\n                                // firebase_insidefield_uid: uid,\r\n                                // people_name: name,\r\n                                people_photo_url:url,\r\n                                // people_email: email\r\n                            })\r\n                        }).catch((error) => alert(error))\r\n                        \r\n                        //   if (photourl === photourl) {\r\n                        //     alert('Image Uploaded')\r\n                        //   }\r\n\r\n                            \r\n                        }                                      \r\n    }\r\n\r\n    const skip_and_go = (e) => {\r\n        e.preventDefault();\r\n\r\n        var storageRef = firebase.storage().ref();\r\n        var imageRef = storageRef.child(`${uid}`);\r\n\r\n        imageRef.getDownloadURL().then(function(url) {\r\n            database.collection('people_collection').doc(uid).update({people_photo_url:url})\r\n        }).catch(error => alert(error))\r\n    \r\n    }\r\n\r\n        \r\n \r\n   \r\n\r\n\r\n    return (\r\n        <div className='imageupload'>\r\n\r\n            <div className='imageupload__foot'>\r\n                {/* <p className='imageupload__foot__P'>Don't want to upload or have already uploaded,</p><h4> click </h4> */}\r\n                <Button className='imageupload__foot_button' variant=\"contained\" fontSize='large' onClick={skip_and_go} > <Link to='/' >SKip</Link></Button>\r\n            </div>\r\n            \r\n\r\n            <div className='imageupload__name'>\r\n                 <h3> Hi! {name}</h3>\r\n            </div>\r\n            \r\n            <div className='imageupload__inputbuttons'>\r\n                <input  onChange={e => setimage(e.target.files[0])}  type=\"file\" placeholder='Choose your image' />\r\n                    <Button variant=\"contained\"  onClick={send_image_to_firestore} ><Link to='/' >Submit</Link></Button>\r\n            </div>\r\n           \r\n           \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Imageupload\r\n","import React, { useEffect } from 'react';\r\n// import { user } from './features/user/UserLogin';\r\nimport './App.css';\r\nimport HeaderIcons from './HeaderIcons'\r\nimport Footericons from './Footericons';\r\nimport TinderCards from './TinderCards';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Chatboxes from './Chatboxes';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser_email, selectUser_name, selectUser_photourl, selectUser_uid, Sign_in, Sign_out } from './features/user/userSlice';\r\nimport UserLogin from './features/user/UserLogin';\r\nimport Imageupload from './Imageupload';\r\nimport { auth, database } from './firebase';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const uid = useSelector(selectUser_uid)\r\n  // const name = useSelector(selectUser_name)\r\n  // const photourl = useSelector(selectUser_photourl)\r\n  // const email = useSelector(selectUser_email)\r\n \r\n  const dispatch = useDispatch()\r\n\r\n      useEffect(() => {\r\n      \r\n                  auth.onAuthStateChanged(authUser => {\r\n                    if (authUser) {\r\n                      dispatch(Sign_in({\r\n                        uid_google: authUser.uid,\r\n                        name_google: authUser.displayName,\r\n                        photourl_google: authUser.photoURL,\r\n                        email_google: authUser.email\r\n                      }))\r\n                    } else {\r\n                      dispatch(Sign_out())\r\n                    }\r\n                  }\r\n                \r\n                  )\r\n      }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n\r\n    \r\n    \r\n                  <Router>\r\n                  \r\n\r\n                  {!uid ? <UserLogin /> \r\n                    :\r\n\r\n                  <Switch>\r\n\r\n\r\n\r\n                  <Route path='/chats'>\r\n                    <HeaderIcons backarrow_prop='/' />\r\n                    <Chatboxes />\r\n                  </Route>\r\n\r\n                  <Route path='/imageupload'>\r\n                      <Imageupload />\r\n                  </Route>\r\n\r\n                  <Route path='/'>\r\n                      <HeaderIcons />\r\n                      <TinderCards />\r\n                      <Footericons />       \r\n                  </Route>\r\n\r\n            \r\n\r\n                  \r\n                  </Switch>\r\n}\r\n                  </Router>\r\n\r\n\r\n\r\n\r\n      \r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <div className=\"App\">\r\n<header className=\"App-header\">\r\n  <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n  <Counter />\r\n  <p>\r\n    Edit <code>src/App.js</code> and save to reload.\r\n  </p>\r\n  <span>\r\n    <span>Learn </span>\r\n    <a\r\n      className=\"App-link\"\r\n      href=\"https://reactjs.org/\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      React\r\n    </a>\r\n    <span>, </span>\r\n    <a\r\n      className=\"App-link\"\r\n      href=\"https://redux.js.org/\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      Redux\r\n    </a>\r\n    <span>, </span>\r\n    <a\r\n      className=\"App-link\"\r\n      href=\"https://redux-toolkit.js.org/\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      Redux Toolkit\r\n    </a>\r\n    ,<span> and </span>\r\n    <a\r\n      className=\"App-link\"\r\n      href=\"https://react-redux.js.org/\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      React Redux\r\n    </a>\r\n  </span>\r\n</header>\r\n</div> */}","import { configureStore } from '@reduxjs/toolkit';\r\n// import counterReducer from '../features/counter/counterSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\n\r\n// here configureStore is configuring store for us\r\nexport default configureStore({\r\n  // and we are passing it a reducer\r\n  // and which as a layer called counter that has a reducer counterReducer\r\n  // you can have many layer\r\n  // and each layer and has a reducer\r\n  // such layer are called Slice of the Store\r\n  // you can have many layer here and all of them are independent to each other\r\n  reducer: {\r\n    // counter: counterReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}